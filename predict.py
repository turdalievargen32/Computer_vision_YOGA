import os
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import argparse

# ==== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ====
MODEL_PATH = 'saved_model/yoga_model.h5'
IMG_SIZE = (224, 224)
DATA_DIR = os.path.expanduser('~/Desktop/Asyl_project/DATASET/TRAIN')

# ==== –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ ====
CLASSES = sorted(os.listdir(DATA_DIR))

# ==== –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ====
def predict_pose(img_path):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = image.load_img(img_path, target_size=IMG_SIZE)
    img_array = image.img_to_array(img)
    img_array = preprocess_input(img_array)  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è MobileNetV2
    img_array = np.expand_dims(img_array, axis=0)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = load_model(MODEL_PATH)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = model.predict(img_array)
    predicted_index = np.argmax(predictions)
    predicted_class = CLASSES[predicted_index]
    confidence = predictions[0][predicted_index]

    print(f"\nüßò –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∞: **{predicted_class}**")
    print(f"üîç –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.2f}%\n")

# ==== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--image', required=True, help='–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    args = parser.parse_args()

    if not os.path.exists(args.image):
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å.")
    else:
        predict_pose(args.image)
