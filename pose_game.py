import cv2
import mediapipe as mp
import numpy as np
import joblib
import time
import random
import os

class PoseGame:
    def __init__(self, model_path='pose_classifier.pkl'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        self.model = joblib.load(model_path)
        self.labels = self.model.classes_.tolist()
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å –∫–ª–∞—Å—Å–∞–º–∏: {self.labels}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.target_duration = 50  # –°–µ–∫—É–Ω–¥—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∑—ã
        self.confidence_threshold = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % –¥–ª—è –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è (–ø–æ–Ω–∏–∂–µ–Ω —Å 80 –¥–æ 50)
        self.rounds = 3
        
        # MediaPipe
        self.mp_pose = mp.solutions.pose
        self.pose = self.mp_pose.Pose(
            static_image_mode=False,
            model_complexity=1,
            enable_segmentation=False,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5
        )
        self.mp_drawing = mp.solutions.drawing_utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        
    def get_landmarks(self, results):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫"""
        if not results.pose_landmarks:
            return None
        
        row = []
        for lm in results.pose_landmarks.landmark:
            row.extend([lm.x, lm.y, lm.z, lm.visibility])
        return row
    
    def predict_pose(self, landmarks):
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–æ—á–∫–∞–º"""
        if landmarks is None or len(landmarks) != 132:
            return None, 0
        
        try:
            X_input = np.array(landmarks).reshape(1, -1)
            prediction = self.model.predict(X_input)[0]
            confidence = self.model.predict_proba(X_input).max() * 100
            return prediction, confidence
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None, 0
    
    def draw_text(self, image, text, position, color=(255, 255, 255), scale=1.0, thickness=2):
        """–†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–≤–æ–¥–∫–æ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        font = cv2.FONT_HERSHEY_SIMPLEX
        
        # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
        cv2.putText(image, text, position, font, scale, (0, 0, 0), thickness + 2)
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        cv2.putText(image, text, position, font, scale, color, thickness)
    
    def play_round(self, round_num, target_pose):
        """–ò–≥—Ä–∞–µ–º –æ–¥–∏–Ω —Ä–∞—É–Ω–¥"""
        print(f"\n–†–∞—É–Ω–¥ {round_num}: –ü–æ–∫–∞–∂–∏—Ç–µ –ø–æ–∑—É '{target_pose}'")
        
        start_time = time.time()
        pose_detected = False
        
        while True:
            ret, frame = self.cap.read()
            if not ret:
                print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã")
                break
            
            # –û—Ç—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            frame = cv2.flip(frame, 1)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è MediaPipe
            image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            results = self.pose.process(image_rgb)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ BGR –¥–ª—è OpenCV
            image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            elapsed_time = time.time() - start_time
            remaining_time = max(0, self.target_duration - elapsed_time)
            
            # –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.draw_text(image, f"Round {round_num}/{self.rounds}", (10, 30), (255, 255, 255), 0.8)
            self.draw_text(image, f"Target: {target_pose}", (10, 60), (0, 255, 255), 1.0, 2)
            self.draw_text(image, f"Time: {remaining_time:.1f}s", (10, 90), (255, 255, 255), 0.8)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑—É
            if results.pose_landmarks:
                # –†–∏—Å—É–µ–º —Å–∫–µ–ª–µ—Ç
                self.mp_drawing.draw_landmarks(
                    image, results.pose_landmarks, self.mp_pose.POSE_CONNECTIONS
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                landmarks = self.get_landmarks(results)
                prediction, confidence = self.predict_pose(landmarks)
                
                if prediction:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑—ã
                    if prediction == target_pose and confidence > self.confidence_threshold:
                        self.draw_text(image, "‚úÖ CORRECT!", (10, 130), (0, 255, 0), 1.2, 3)
                        pose_detected = True
                    elif prediction == target_pose:
                        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∞, –Ω–æ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        self.draw_text(image, f"‚ö†Ô∏è {prediction} (Low confidence)", (10, 130), (255, 165, 0), 1.0)
                        self.draw_text(image, f"Confidence: {confidence:.1f}% (need {self.confidence_threshold}%)", (10, 160), (255, 165, 0), 0.7)
                    else:
                        self.draw_text(image, f"‚ùå Detected: {prediction}", (10, 130), (0, 0, 255), 1.0)
                        self.draw_text(image, f"Confidence: {confidence:.1f}%", (10, 160), (255, 255, 255), 0.7)
            else:
                self.draw_text(image, "‚ö†Ô∏è No pose detected", (10, 130), (255, 165, 0), 1.0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cv2.imshow('Pose Game - Press Q to quit', image)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                return False, True  # –ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω, –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
            
            if pose_detected:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –µ—â–µ —Å–µ–∫—É–Ω–¥—É
                success_start = time.time()
                while time.time() - success_start < 1.0:
                    ret, frame = self.cap.read()
                    if ret:
                        frame = cv2.flip(frame, 1)
                        image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        results = self.pose.process(image_rgb)
                        image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR)
                        
                        if results.pose_landmarks:
                            self.mp_drawing.draw_landmarks(
                                image, results.pose_landmarks, self.mp_pose.POSE_CONNECTIONS
                            )
                        
                        self.draw_text(image, f"Round {round_num}/{self.rounds}", (10, 30), (255, 255, 255), 0.8)
                        self.draw_text(image, f"Target: {target_pose}", (10, 60), (0, 255, 255), 1.0, 2)
                        self.draw_text(image, "üéâ SUCCESS! üéâ", (10, 130), (0, 255, 0), 1.5, 3)
                        
                        cv2.imshow('Pose Game - Press Q to quit', image)
                        cv2.waitKey(1)
                
                return True, False  # –ó–∞—Å—á–∏—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            
            if remaining_time <= 0:
                return False, False  # –í—Ä–µ–º—è –≤—ã—à–ª–æ, –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω
    
    def play(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞"""
        print("=== POSE GAME STARTED ===")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑—ã: {', '.join(self.labels)}")
        print(f"–†–∞—É–Ω–¥–æ–≤: {self.rounds}")
        print(f"–í—Ä–µ–º—è –Ω–∞ –ø–æ–∑—É: {self.target_duration} —Å–µ–∫—É–Ω–¥")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.confidence_threshold}%")
        print("–ù–∞–∂–º–∏—Ç–µ Q –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        score = 0
        
        try:
            for round_num in range(1, self.rounds + 1):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑—É
                target_pose = random.choice(self.labels)
                
                # –ò–≥—Ä–∞–µ–º —Ä–∞—É–Ω–¥
                success, quit_game = self.play_round(round_num, target_pose)
                
                if quit_game:
                    print("\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                
                if success:
                    score += 1
                    print(f"–†–∞—É–Ω–¥ {round_num}: –£–°–ü–ï–•! (–°—á–µ—Ç: {score}/{round_num})")
                else:
                    print(f"–†–∞—É–Ω–¥ {round_num}: –í—Ä–µ–º—è –≤—ã—à–ª–æ (–°—á–µ—Ç: {score}/{round_num})")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if round_num < self.rounds and not quit_game:
                    print("–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É...")
                    time.sleep(2)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.show_final_score(score)
            
        except KeyboardInterrupt:
            print("\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        finally:
            self.cleanup()
    
    def show_final_score(self, score):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç"""
        print(f"\n=== –ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}/{self.rounds}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        for _ in range(90):  # 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 30 FPS
            ret, frame = self.cap.read()
            if ret:
                frame = cv2.flip(frame, 1)
                image = cv2.cvtColor(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB), cv2.COLOR_RGB2BGR)
                
                # –†–∏—Å—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.draw_text(image, "GAME OVER", (180, 200), (255, 255, 255), 2.0, 4)
                self.draw_text(image, f"Final Score: {score}/{self.rounds}", (120, 280), (255, 255, 0), 1.5, 3)
                
                # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if score == self.rounds:
                    self.draw_text(image, "PERFECT!", (160, 350), (0, 255, 0), 1.5, 3)
                elif score >= self.rounds * 0.7:
                    self.draw_text(image, "GOOD JOB!", (140, 350), (0, 255, 255), 1.5, 3)
                else:
                    self.draw_text(image, "KEEP TRYING!", (100, 350), (255, 165, 0), 1.5, 3)
                
                cv2.imshow('Pose Game - Press Q to quit', image)
                if cv2.waitKey(33) & 0xFF == ord('q'):
                    break
    
    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã"""
        if self.cap:
            self.cap.release()
        cv2.destroyAllWindows()
        print("–†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        game = PoseGame()
        game.play()
    except FileNotFoundError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'pose_classifier.pkl' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    except RuntimeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()